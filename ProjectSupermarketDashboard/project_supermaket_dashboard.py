# -*- coding: utf-8 -*-
"""Project_Supermaket_Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t0rjzpE4mr5UQKUoR7HI4816NJHmOysS
"""

# Importação das bibliotecas utilizadas
import streamlit as st
# Uma biblioteca para criar aplicativos da web com Python
import pandas as pd
# Uma biblioteca para análise e manipulação de dados em Python
import plotly.express as px
# Uma biblioteca para criação de visualizações interativas

st.set_page_config(layout="wide")
# Permite que os elementos do aplicativo ocupem mais espaço na largura da página

# Com uma visão mensal
# Faturamento por unidade
# Tipo de produto mais vendido, contribuição por filial
# Desempenho das forma de pagamento
# Como estão as avaliações das filiais

df = pd.read_csv("supermarket_sales.csv", sep=";", decimal=",")
# Carrega os dados de um arquivo CSV chamado "supermarket_sales.csv" em um DataFrame do Pandas
df["Date"] = pd.to_datetime(df["Date"])
# Converte a coluna "Date" para o formato de data do Pandas
df=df.sort_values("Date")
# Ordena o DataFrame com base na coluna "Date"

df["Month"] = df["Date"].apply(lambda x: str(x.year) + "-" + str(x.month))
month = st.sidebar.selectbox("Mês", df["Month"].unique())
# Cria uma nova coluna "Month" que combina o ano e o mês de cada data

df_filtered = df[df["Month"] == month]
# Filtra o DataFrame original para manter apenas as linhas que correspondem ao mês selecionado na barra lateral.

col1, col2 = st.columns(2)
col3, col4, col5 = st.columns(3)
# Divide a largura da página em 2 colunas para os dois primeiros gráficos e em 3 colunas para os três últimos gráficos

fig_date = px.bar(df_filtered, x="Date", y="Total", color="City", title="Faturamento por dia")
# Cria um gráfico de barras usando Plotly Express
col1.plotly_chart(fig_date, use_container_width=True)
# Exibe o gráfico na primeira coluna do layout

fig_prod = px.bar(df_filtered, x="Date", y="Product line",
                  color="City", title="Faturamento por tipo de produto",
                  orientation="h")
col2.plotly_chart(fig_prod, use_container_width=True)


city_total = df_filtered.groupby("City")[["Total"]].sum().reset_index()
fig_city = px.bar(city_total, x="City", y="Total",
                   title="Faturamento por filial")
col3.plotly_chart(fig_city, use_container_width=True)


fig_kind = px.pie(df_filtered, values="Total", names="Payment",
                   title="Faturamento por tipo de pagamento")
col4.plotly_chart(fig_kind, use_container_width=True)


city_total = df_filtered.groupby("City")[["Rating"]].mean().reset_index()
fig_rating = px.bar(df_filtered, y="Rating", x="City",
                   title="Avaliação")
col5.plotly_chart(fig_rating, use_container_width=True)
